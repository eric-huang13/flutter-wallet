// Mocks generated by Mockito 5.0.14 from annotations
// in pylons_wallet/test/unit_testing/stores/wallet_store_imp_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:transaction_signing_gateway/model/credentials_storage_failure.dart'
as _i5;
import 'package:transaction_signing_gateway/model/transaction_broadcasting_failure.dart'
as _i8;
import 'package:transaction_signing_gateway/model/transaction_hash.dart' as _i9;
import 'package:transaction_signing_gateway/model/transaction_signing_failure.dart'
as _i6;
import 'package:transaction_signing_gateway/model/wallet_derivation_failure.dart'
as _i10;
import 'package:transaction_signing_gateway/model/wallet_derivation_info.dart'
as _i11;
import 'package:transaction_signing_gateway/model/wallet_lookup_key.dart'
as _i7;
import 'package:transaction_signing_gateway/transaction_signing_gateway.dart'
as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [TransactionSigningGateway].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionSigningGateway extends _i1.Mock
    implements _i3.TransactionSigningGateway {
  MockTransactionSigningGateway() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CredentialsStorageFailure, _i2.Unit>> storeWalletCredentials(
      {_i3.PrivateWalletCredentials? credentials,
        String? password,
        String? additionalData}) =>
      (super.noSuchMethod(
          Invocation.method(#storeWalletCredentials, [], {
            #credentials: credentials,
            #password: password,
            #additionalData: additionalData
          }),
          returnValue:
          Future<_i2.Either<_i5.CredentialsStorageFailure, _i2.Unit>>.value(
              _FakeEither_0<_i5.CredentialsStorageFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.CredentialsStorageFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.CredentialsStorageFailure, _i2.Unit>>
  updateWalletPublicInfo({_i3.WalletPublicInfo? info}) => (super.noSuchMethod(
      Invocation.method(#updateWalletPublicInfo, [], {#info: info}),
      returnValue: Future<
          _i2.Either<_i5.CredentialsStorageFailure, _i2.Unit>>.value(
          _FakeEither_0<_i5.CredentialsStorageFailure, _i2.Unit>())) as _i4
      .Future<_i2.Either<_i5.CredentialsStorageFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i6.TransactionSigningFailure, _i3.SignedTransaction>> signTransaction(
      {_i3.UnsignedTransaction? transaction,
        _i7.WalletLookupKey? walletLookupKey}) =>
      (super.noSuchMethod(
          Invocation.method(#signTransaction, [],
              {#transaction: transaction, #walletLookupKey: walletLookupKey}),
          returnValue:
          Future<_i2.Either<_i6.TransactionSigningFailure, _i3.SignedTransaction>>.value(
              _FakeEither_0<_i6.TransactionSigningFailure, _i3.SignedTransaction>())) as _i4
          .Future<_i2.Either<_i6.TransactionSigningFailure, _i3.SignedTransaction>>);
  @override
  _i4.Future<_i2.Either<_i8.TransactionBroadcastingFailure, _i9.TransactionHash>> broadcastTransaction(
      {_i7.WalletLookupKey? walletLookupKey,
        _i3.SignedTransaction? transaction}) =>
      (super.noSuchMethod(
          Invocation.method(#broadcastTransaction, [],
              {#walletLookupKey: walletLookupKey, #transaction: transaction}),
          returnValue:
          Future<_i2.Either<_i8.TransactionBroadcastingFailure, _i9.TransactionHash>>.value(
              _FakeEither_0<_i8.TransactionBroadcastingFailure, _i9.TransactionHash>())) as _i4
          .Future<_i2.Either<_i8.TransactionBroadcastingFailure, _i9.TransactionHash>>);
  @override
  _i4.Future<_i2.Either<_i10.WalletDerivationFailure, _i3.PrivateWalletCredentials>>
  deriveWallet({_i11.WalletDerivationInfo? walletDerivationInfo}) => (super.noSuchMethod(
      Invocation.method(
          #deriveWallet, [], {#walletDerivationInfo: walletDerivationInfo}),
      returnValue:
      Future<_i2.Either<_i10.WalletDerivationFailure, _i3.PrivateWalletCredentials>>.value(
          _FakeEither_0<_i10.WalletDerivationFailure, _i3.PrivateWalletCredentials>())) as _i4
      .Future<_i2.Either<_i10.WalletDerivationFailure, _i3.PrivateWalletCredentials>>);
  @override
  _i4.Future<_i2.Either<_i5.CredentialsStorageFailure, List<_i3.WalletPublicInfo>>>
  getWalletsList() => (super.noSuchMethod(Invocation.method(#getWalletsList, []),
      returnValue:
      Future<_i2.Either<_i5.CredentialsStorageFailure, List<_i3.WalletPublicInfo>>>.value(
          _FakeEither_0<_i5.CredentialsStorageFailure,
              List<_i3.WalletPublicInfo>>())) as _i4
      .Future<_i2.Either<_i5.CredentialsStorageFailure, List<_i3.WalletPublicInfo>>>);
  @override
  _i4.Future<_i2.Either<_i6.TransactionSigningFailure, bool>> verifyLookupKey(
      _i7.WalletLookupKey? walletLookupKey) =>
      (super.noSuchMethod(
          Invocation.method(#verifyLookupKey, [walletLookupKey]),
          returnValue:
          Future<_i2.Either<_i6.TransactionSigningFailure, bool>>.value(
              _FakeEither_0<_i6.TransactionSigningFailure, bool>()))
      as _i4.Future<_i2.Either<_i6.TransactionSigningFailure, bool>>);
  @override
  String toString() => super.toString();
}
